import unittest
import unittest.mock
import string
from main import get_password_amount, get_password_length, get_user_input, get_user_preferences, password_generator

class TestPasswordGenerator(unittest.TestCase):

    def setUp(self):
        global uppercase_letters, lowercase_letters, digits, special_characters        
        uppercase_letters = string.ascii_uppercase
        lowercase_letters = string.ascii_lowercase
        digits = string.digits
        special_characters = string.punctuation

    ## Tests for user input
    def test_user_input_no(self):
        with unittest.mock.patch("builtins.input", return_value = "no"):
            self.assertFalse(get_user_input("Do you want to include UPPERCASE letters?"))
    
    def test_user_input_yes(self):
        global lower
        with unittest.mock.patch("builtins.input", return_value = "yes"):
            lower = (get_user_input("Do you want to include LOWERCASE letters?"))
            self.assertTrue(lower)

    def test_user_input_invalid_then_valid(self):
        with unittest.mock.patch("builtins.input", side_effect = ["wow", "yes"]):
            result = get_user_input("Do you want to include NUMBERS?")
            self.assertTrue(result)

    def test_user_input_multiple_invalid_then_valid(self):
        with unittest.mock.patch("builtins.input", side_effect = ["wow", "crazy", "no"]):
            result = get_user_input("Do you want to include SPECIAL CHARACTERS?")
            self.assertFalse(result)

    def test_user_preferences_all_yes(self):
        with unittest.mock.patch("builtins.input", side_effect = ["yes", "yes", "yes", "yes"]):
            preferences = get_user_preferences()
            self.assertTrue(preferences["upper"])
            self.assertTrue(preferences["lower"])
            self.assertTrue(preferences["numbers"])
            self.assertTrue(preferences["s_char"])
            self.assertIn(uppercase_letters, (preferences["all"]))
            self.assertIn(lowercase_letters, (preferences["all"]))
            self.assertIn(digits, (preferences["all"]))
            self.assertIn(special_characters, (preferences["all"]))
    
    def test_user_preferences_some_yes(self):
        with unittest.mock.patch("builtins.input", side_effect = ["no", "yes", "no", "yes"]):
            preferences = get_user_preferences()
            self.assertFalse(preferences["upper"])
            self.assertTrue(preferences["lower"])
            self.assertFalse(preferences["numbers"])
            self.assertTrue(preferences["s_char"])
            self.assertNotIn(uppercase_letters, (preferences["all"]))
            self.assertIn(lowercase_letters, (preferences["all"]))
            self.assertNotIn(digits, (preferences["all"]))
            self.assertIn(special_characters, (preferences["all"]))
    
    def test_user_preferences_none_then_yes(self):
            with unittest.mock.patch("builtins.input", side_effect = ["no", "no", "no", "no", "yes", "no", "no", "no"]):
                preferences = get_user_preferences()
                self.assertTrue(preferences["upper"])
                self.assertFalse(preferences["lower"])
                self.assertFalse(preferences["numbers"])
                self.assertFalse(preferences["s_char"])
                self.assertIn(uppercase_letters, (preferences["all"]))
                self.assertNotIn(lowercase_letters, (preferences["all"]))
                self.assertNotIn(digits, (preferences["all"]))
                self.assertNotIn(special_characters, (preferences["all"]))

if __name__ == '__main__':
    unittest.main()